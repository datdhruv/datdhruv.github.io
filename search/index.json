[{"content":"What is Port Forwarding? Port Forwarding allows you to make a port on a computer behave like it is part of some other computer.\nSay you are running a website on a computer A, on localhost:8080, you can forward this port to another computer B and then any connection to computer-B:8080 will be tunneled back to computer A.\nThis was an example of local port forwarding.\nYou can go the other way round as well, having a website run on computer-B:8080 and tunnel it to the Computer A. This is called remote port forwarding.\nA little more Explanation Let us consider the \u0026ldquo;tunnel\u0026rdquo;.\nThe tunnel has a start and an end and the traffic is tunneled from start to end.\nWhen the tunnel ends at our local Machine host, it\u0026rsquo;s called a local port forward (Tunnel ends at Local port) whereas when the tunnel starts at local port \u0026amp; ends at the remote port it\u0026rsquo;s called remote port forwarding\nThe first IP is for specifying access.\nWho has access? localhost or anyone on the network?\nWhile in local port forwarding, you can have a setup wherein only you, on your own machine can access this website. There can be another arrangement wherein you can allow others on your network to access the tunnel/local port forward. In this situation they will access it via yourip:forward-binded-port\nSame for remote. If an ip is specified then only access to remote tunnel. No other ip on the network can access this IP address.\nWhen you use the -L flag, you can bind the remote port to the local port and listen to incoming connections on that port\n1 2 3 4 -L [bind_address:]port:host:hostport -L [bind_address:]port:remote_socket -L local_socket:host:hostport -L local_socket:remote_socket Specifies that connections to the given TCP port or Unix socket on the local (client) host are to be forwarded to the given host and port, or Unix socket, on the remote side. This works by allocating a socket to listen to either a TCP port on the local side, optionally bound to the specified bind_address, or to a Unix socket. Whenever a connection is made to the local port or socket, the connection is forwarded over the secure channel, and a connection is made to either host port hostport, or the Unix socket remote_socket, from the remote machine.\nPort forwardings can also be specified in the configuration file. Only the superuser can forward privileged ports. IPv6 addresses can be specified by enclosing the address in square brackets.\nBy default, the local port is bound in accordance with the GatewayPorts setting. However, an explicit bind_address may be used to bind the connection to a specific address. The bind_address of localhost indicates that the listening port be bound for local use only, while an empty address or * indicates that the port should be available from all interfaces.\nIf remote port forwarding does not work, it is most likely because GatewayPorts is set to no in the sshd_config file.\nRemember, in local port forwarding, A request to my computer\u0026rsquo;s port is forwarded to a remote computer\u0026rsquo;s port and in remote port forwarding, requests to a remote computer\u0026rsquo;s port are forwarded to my computer\u0026rsquo;s port.\nThis means that the meaning of host varies depending upon if the the port forwarding is local or remote. In local port forwarding, the host is the ssh-server. Whereas in remote port forwarding the host is the ssh-client (host is the one which hosts something on a port)\nYou can further forward ports through jump servers.\n1 ssh -L local_socket:host:hostport user@machine1 ssh -L local_socket:host:hostport user@machine2 Forwarding with an already established ssh connection Note: ~ is the escape sequence for ssh by default. If it doesnt work immediately, you may need to press enter once and the try entering ~\n~ C Brings up a (local) ssh shell, wherein you can then ask for port forwarding the same way we did earlier.\n1 2 -L [bind_address:]port:host:hostport -R [bind_address:]port:host:hostport Further you can stop the port forwarding Enter the ssh command mode, then input the forwarding command with a leading K\n1 2 -KL [bind_address:]port -KR [bind_address:]port ","date":"2021-05-19T12:00:00+04:00","permalink":"https://datdhruv.github.io/p/why-ssh-port-forwarding-gives-you-superpowers/","title":"Why SSH port Forwarding gives you superpowers"},{"content":"Some Conventions\nrepository(repo) -\u0026gt; basically just a folder, which has all your code in it\nlocal repo -\u0026gt; The folder that is On your computer\nremote repo -\u0026gt; The folder that is on some git server (or on a server, basically not on your computer)\norigin is the git repo, master is the branch of the repo you want to push to.\nBefore we proceed, please also check the help pages and the man pages for the topics, they go beyond these basics and explaing in more depth\nTo initialize a local repository 1 git init \u0026lt;directory\u0026gt; if you create a directory on a remote and initialize with git init . and then try commiting to it, it wont happen!\non the remote you need to git checkout -b tmp and then push from your machine(local) to the remote\nhere is a stackoverflow page\nI just had the same error while I began learning Git. Some of the other answers are clearly not for someone new to Git!\n(I am going to use non technical terms to get the idea across.) Anyway, what is happening is that you have two repositories, one is the original you first made, and the other the work one you just made.\nRight now you are in your work repository and are using the \u0026ldquo;master\u0026rdquo; branch. But you also happen to be \u0026ldquo;logged in\u0026rdquo; in your original repository to the same \u0026ldquo;master\u0026rdquo; branch. Now since you\u0026rsquo;re \u0026ldquo;logged in\u0026rdquo; in the original, Git fears you might mess up because you might be working on the original and screw things up. So you need to return to the original repository and do a \u0026ldquo;git checkout someotherbranch\u0026rdquo;, and now you can push with no problems.\nI hope this helps.\nTo add the recent changes to the tracker list 1 2 3 4 5 # adding only a single file git add \u0026lt;filename\u0026gt; # OR add an entire directory git add \u0026lt;directory\u0026gt; Checking the things in the tracker list this is done with the status command\n1 2 3 4 5 6 7 8 9 git status # example # On branch master # Your branch is up to date with \u0026#39;origin/master\u0026#39;. # Changes to be committed: # (use \u0026#34;git restore --staged \u0026lt;file\u0026gt;...\u0026#34; to unstage) # new file: About-git.md Commiting the changes in the tracker list for global config 1 2 git config --global user.name \u0026#34;firstname lastname\u0026#34; git config --global user.email \u0026#34;email_id\u0026#34; you can also set local directory related config 1 2 git config user.name \u0026#34;firstname lastname\u0026#34; git config user.email \u0026#34;email_id\u0026#34; While commiting, a message is absolutely required. Another -m can be used to provide some description about the message\n1 2 3 4 5 6 git commit -m \u0026#34;message\u0026#34; -m \u0026#34;description\u0026#34; # git commit -m \u0026#34;add stuff to about git\u0026#34; # [master cd5c47a] add stuff to about git # 1 file changed, 126 insertions(+) # create mode 100644 About-git.md Making changes to a remote repository This can be done via SSH keys or via Gitcredential manager\nCreate SSH keys and add the .pub (public part) of the key on github/your git provider\n1 ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; Ensure ssh-agent is running\n1 2 3 # start the ssh-agent in the background $ eval $(ssh-agent -s) \u0026gt; Agent pid 59566 or on Windows powershell\n1 2 Get-Service -Name ssh-agent | Set-Service -StartupType Manual Start-Service ssh-agent Add your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace�id_rsa�in the command with the name of your private key file.\n1 $ ssh-add ~/.ssh/id_rsa Add the ssh key to your git provider\nsetting up a git server Most of it is the same, you need to initialize a bare repository, to which you commit to and pull from on the server. And ofc add ssh public key of your computer to the serve.\n1 2 3 4 # on the server initialize a bare repository with .git extention as an conventi mkdir my_repo.git cd my_repo.git git init --bare Next you need to set up the repo in your git project using the git remote sub-command.\n1 2 3 git remote add [-t \u0026lt;branch\u0026gt;] [-m \u0026lt;master\u0026gt;] [-f] [--[no-]tags] [--mirror=(fetch|push)] \u0026lt;name\u0026gt; \u0026lt;url\u0026gt; # or update and existing url with git remote set-url [--push] \u0026lt;name\u0026gt; \u0026lt;newurl\u0026gt; [\u0026lt;oldurl\u0026gt;] Then you can use the push command\n1 2 3 git push origin master # origin is the git repo # master is the branch of the repo you want to push to Getting changes from remote repository To do this you use the pull command\n1 git pull origin master Tracking changes in a local repo use the git log command\n1 git log this gives the recent changes along with the unique hashcodes of each change\nUndoing changes we can undo the most recent changes using the git reset command\nreset without any argument resets only changes in the tracker list(git add stuff), to undo commits, you need to specify HEAD~a_num. HEAD is a pointer to the most recent change. HEAD~1 -\u0026gt; HEAD -1 = the change before the most recent change\n1 2 3 4 5 # for tracker git reset # for commits git reset HEAD~1 # or HEAD~a_num To undo Remote commits:\n1 2 git reset HEAD~1 # remove commit locally git push origin +HEAD # force-push the new HEAD commit Branching to change to a different branch of the repo, use the checkout -b command\n1 2 3 git checkout -b \u0026lt;branch-name\u0026gt; # example # git checkout -b master to merge the changes of the two branches, here you don\u0026rsquo;t have to specify the branch you want to merge INTO because it is usually the branch you are currently working on\n1 git merge \u0026lt;branch name\u0026gt; You can merge a branch into the main branch as a single commit using the --squash flag with git merge. When you sqash a branch, the commit history from that branch does not come into the branch you are merging into. So you may have multiple commits in the diverging branch, but when you merge, these commits will not come into the branch you are merging into, instead the state of the final commit will be merged.\nto push a branch onto a remote git server:\n1 2 git push --set-upstream origin branch_name git push -u origin branch_name Managing merge conflicts chekck this out\nuse git stash command\nTo delete branches 1 2 3 4 5 # To delete branch locally: git branch -d branch_name # To delete branch remotely: git push origin/remote_ref --delete branch_name Git tags tags are non-branch save points\nto create a tag, just do git tag tag-name\nyou can also checkout git tags using the checkout command\nGit stash What git stash does is, it will see all the unadded, uncommited changes to files, with respect to HEAD (and possibly other branches if checked out into them) and store it in a tree.\nThen it will revert the directory to the clean working state like HEAD\nUse git stash pop or git stash apply to apply these previously unsaved changes again, after, for example pulling the latest version of the repo. Then the unsaved changes and work can be saved back to the updated repo.\nIf the changes have outlived their purpose, you can git stash drop the changes\ngit stash list to list stashes and git stash show to show changes\nDeleting the history of a branch 1 2 3 4 5 6 git checkout --orphan tmp-main # create a temporary branch git add -A # Add all files and commit them git commit -m \u0026#39;Add files\u0026#39; git branch -D main # Deletes the master branch git branch -m main # Rename the current branch to master git push -f origin main # Force push master branch to Git server Git log, Git show \u0026amp; Git Diff git log shows you a history of all the commits in a branch.\nWith the git log --stat command you can see what files were changed and a breif on what the changes were as well.\nThe git show command will give you even more details telling you exactly what the changes were.\nThe git diff command will give you the exact changes between two commit hashes\nGetting changes in a remote repo First you need to fetch the changes, this is done with the command git fetch. Then to see what the changes actually are, you can use git log main..origin/main or git log local_branch..remote/branch\n","date":"2020-03-05T12:00:00+04:00","permalink":"https://datdhruv.github.io/p/git/","title":"Git"},{"content":"(mirror copy) The question If several computers with local addresses (192.168.0.#) are connected to a router and each computer opens a web browser and requests a page over HTTP, when these TCP:80 packets are sent out, the router switches the local address with the static IP of the router (i.e. Provider given IP) so the server can reply to the appropriate address.\nBut how does the router know to which computer to forward the HTTP reply, since the TCP header does not contain the local IP address (does it?), and all computers are using port 80?\nDoes this have anything to do with the MAC addresses?\nHow exactly does this work?\nThe answer Most home routers use a special-case of NAT called PAT.\nYou\u0026rsquo;ll also see it referred to as NAPT, or IP Masquerading. All three of the latter terms mean the same thing in general use. (The acronyms - Network Address Translation / Port Address Translation / Network Address Port Translation)\nWhen the packet goes out from your internal machine, the source address is rewritten as you are aware. The source port is also changed, usually to a high number, and the router keeps an address translation table.\nFor example, let\u0026rsquo;s say you have a client machine that goes to www.google.com. Your computer (e.g., 192.168.1.100) looks that address up and makes a TCP connection to 72.14.204.147 on port 80 from your internal IP address, using a random source port.\nTo your computer, the connection looks like this:\n192.168.1.100:37641 \u0026lt;--\u0026gt; 72.14.204.147:80\nYour computer sends the packet to the router, which picks a new random high port and rewrites the packet. Each outbound connection gets its own port on the router. The router then forwards the packet on to your ISP after adding it to its connection table:\n1 2 3 PrivateIP PrivatePort PublicIP PublicPort Remote RemotePort ------------- ---------- ----------- ----------- ---------- ----------- 192.168.1.100 37641 *10.6.23.5 59273 72.14.204.147 80 *For example purposes, I used an address starting with 10, but these aren\u0026rsquo;t publicly routable. The table is also somewhat oversimplified.\nTo google, the connection looks like this:\n10.6.23.5:59273 \u0026lt;--\u0026gt; 72.14.204.147:80\nGoogle will send it\u0026rsquo;s reponse to 10.6.23.5 on port 59273. Your router then looks up that information in the table and forwards the packet on to 192.168.1.100:37641.\n","date":"2023-08-17T22:00:00+04:00","permalink":"https://datdhruv.github.io/p/how-does-router-know-where-to-forward-packet/","title":"How does Router know where to forward packet"},{"content":"Installing Postgres 1 2 3 4 5 6 7 8 9 10 11 sudo apt search postgres sudo apt install postgresql sudo apt install postgresql postgresql-contrib sudo systemctl start postgresql.service sudo -i -u postgres sudo -u postgres createuser --interactive sudo -u upskillr psql sudo -u postgres createdb upskillr sudo -u upskillr psql sudo adduser upskillr sudo -u upskillr psql Double and single Quotes in (PG)SQL Double quotes are for names of tables or fields. Sometimes You can omit them. The single quotes are for string constants. This is the SQL standard. In the verbose form, your query looks like this:\n1 select * from \u0026#34;employee\u0026#34; where \u0026#34;employee_name\u0026#34;=\u0026#39;elina\u0026#39;; The PSQL Command To get help, just type \\help in the psql console.\nYou can also get help about the various psql commands if you type in \\? into the psql console. Or you can also get help regarding various Postgres commands if you input \\h into the console.\n","date":"2023-06-24T11:30:00+04:00","permalink":"https://datdhruv.github.io/p/installing-postgresql-on-ubuntu/","title":"Installing Postgresql on Ubuntu"},{"content":"jsonb to record 1 select fla.offer_id, ans_data.* from fla, jsonb_to_record(answer_data) as ans_data(\u0026#34;AE46\u0026#34; text,\u0026#34;AE3\u0026#34; text,\u0026#34;AE16\u0026#34; text,\u0026#34;AE45\u0026#34; date,\u0026#34;AE47\u0026#34; date,\u0026#34;AE55\u0026#34; text,\u0026#34;AE60\u0026#34; text,\u0026#34;AE61\u0026#34; text,\u0026#34;AE73\u0026#34; date,\u0026#34;AE74\u0026#34; date,\u0026#34;AE62\u0026#34; text,\u0026#34;AE27\u0026#34; text,\u0026#34;AE42\u0026#34; text,\u0026#34;AE58\u0026#34; text,\u0026#34;AE25\u0026#34; text,\u0026#34;AE54\u0026#34; text,\u0026#34;AE44\u0026#34; text,\u0026#34;AE17\u0026#34; text,\u0026#34;AE53\u0026#34; text,\u0026#34;AE59\u0026#34; text,\u0026#34;AE19\u0026#34; text,\u0026#34;AE56\u0026#34; text,\u0026#34;AE21\u0026#34; text,\u0026#34;AE57\u0026#34; text,\u0026#34;AE33\u0026#34; text,\u0026#34;AE32\u0026#34; text,\u0026#34;AE41\u0026#34; date,\u0026#34;AE31\u0026#34; date,\u0026#34;AE65\u0026#34; text,\u0026#34;AE66\u0026#34; text,\u0026#34;AE67\u0026#34; text,\u0026#34;AE72\u0026#34; text,\u0026#34;AE52\u0026#34; text,\u0026#34;AE38\u0026#34; text,\u0026#34;AE69\u0026#34; text,\u0026#34;AE70\u0026#34; text,\u0026#34;AE68\u0026#34; text,\u0026#34;AE71\u0026#34; text,\u0026#34;AE39\u0026#34; text); Accessing record\u0026rsquo;s key and values 1 select offer_id, rev, bf.key as business_field, bf.value as business_field_comments from table_name tn, jsonb_each_text((tn.answer_data-\u0026gt;\u0026gt;\u0026#39;FI5\u0026#39;)::jsonb) as bf; JSON String agg 1 2 3 -- Data is stored as text within a json. Data itself is of type json -- The end output is comma separted string from json keys select string_agg(bf, e\u0026#39;, \u0026#39;) from fact_logbook_ae fla, json_object_keys((fla.answer_data-\u0026gt;\u0026gt;\u0026#39;AE54\u0026#39;)::json) bf where offer_id= \u0026#39;SECD-20230013\u0026#39;; Update record on conflict while inserting 1 2 3 my $STMT = $DBH-\u0026gt;prepare(qq~insert into scd_logbook.fact_logbook_ae (offer_id,rev,answer_data,created_by_gid,last_saved_by_gid,created_ts,last_saved_ts) values(?,?,?,?,?,CURRENT_TIMESTAMP,CURRENT_TIMESTAMP) on conflict (offer_id, rev) do update set answer_data=excluded.answer_data, last_saved_ts=CURRENT_TIMESTAMP, last_saved_by_gid=excluded.last_saved_by_gid~) or report_error(\u0026#34;Error preparing SQL:\u0026#34;.$DBH-\u0026gt;errstr()); $STMT-\u0026gt;execute(\u0026#34;$OFFER_ID\u0026#34;,$FD{REV},encode_json \\%ANS,$FD{GID},$FD{GID}) or report_error(\u0026#34;Error executing SQL:\u0026#34;.$DBH-\u0026gt;errstr()) ; Getting max of a revision 1 2 3 4 select * from (select fla.offer_id, rank() over (partition by fla.offer_id order by fla.rev desc) as rank_rev, fla.rev from fla_table fla) as cd where rank_rev = 1 Validate Booking using Functions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 CREATE OR REPLACE FUNCTION validate_booking_date() RETURNS TRIGGER AS $$ DECLARE max_booking_end_date DATE; BEGIN SELECT MAX(booking_end) INTO max_booking_end_date FROM your_table WHERE toolset_id = NEW.toolset_id; IF NEW.booking_start \u0026lt;= max_booking_end_date THEN RAISE EXCEPTION \u0026#39;Booking start date must be greater than the maximum booking end date.\u0026#39;; END IF; RETURN NEW; END; $$ LANGUAGE plpgsql; -- Create a trigger that calls the validate_booking_date function CREATE TRIGGER check_booking_date_trigger BEFORE INSERT ON your_table FOR EACH ROW EXECUTE FUNCTION validate_booking_date(); Control access when creating a dashboard 1 2 3 4 5 6 7 8 9 -- as admin create user app_owner with password \u0026#39;\u0026#39;; create schema app authorization app_owner; create role app_readers; -- run following as schema owner grant usage on schema app to app_readers; alter default privileges in schema app grant select on tables to app_readers; grant select on all tables in schema app to app_readers; ","date":"2023-06-24T11:30:00+04:00","permalink":"https://datdhruv.github.io/p/some-postgresql-examples/","title":"Some Postgresql Examples"},{"content":"It is often tough to know where certain kinds of files or applications are in the Linux files system.\nIt is complicated due to historical reasons, and different distributions often put their files in different locations.\nA good way to know where things are, or where things go, is by referring to your distribution\u0026rsquo;s man pages.\nman hier\n","date":"2023-06-12T21:00:00+04:00","permalink":"https://datdhruv.github.io/p/linux-filesystem-hierarchy/","title":"Linux Filesystem Hierarchy"},{"content":"Recently I had to lookup a usage for function in a project I was working on.\nThis is relatively an easy task with vscode. You just open the search in files menu, type what you are looking for, and off you go.\nThis made me wonder, how would you achieve this task in the command line with something like grep?\nThere is an amazing tool which specializes in this activity: ripgrep, however I was determined to complete this task with just grep.\nHere\u0026rsquo;s what you do:\n1 grep --color -r pattern_to_search This will recursively search for the given pattern in all files in the directory (and the subdiretory)\nYou can even exclude a directly (like .git)\n1 grep --color -r --exclude-dir=.git pattern_to_search ","date":"2023-05-26T22:30:00+04:00","permalink":"https://datdhruv.github.io/p/find-patterns-in-a-directory-with-grep/","title":"Find Patterns in a directory with grep"},{"content":"The default ip addr command, which gives you ip address of your device, is cluttered with alot of values, which may not be useful to you. To quickly get the output, you can pass the -br or --brief argument, which outputs a brief of the network statistic.\nAdditionally you can get color output by passing the -c or --color argument.\n","date":"2022-12-25T11:25:00+04:00","permalink":"https://datdhruv.github.io/p/get-a-brief-of-ip-command-with-color/","title":"Get a Brief of Ip command (with Color)"},{"content":" Key Binding Description ESC f, ESC b Go forward/backword one word CTRL a, CTRL e Go to start/end of line ~ C Enter SSH Command Mode C-b, C-f Move backward/forward one character M-b, M-f Move backward/forward by word C-a, C-e Move to the beginning/end of the line C-w, M-d Kill word backward/forward C-d, Backspace Delete char forward/backward C-d may send EOF on an empty line M-. cycle through the argument to the previous commands C-k, C-u Kill (to clipboard) to end of line/beginning of line C-y Yank from kill ring M-y (after C-y) Cycle through kill ring history C-t, M-t Transpose character/word M-u, M-l, M-c Upper, lower, or capitalize forward word C-_, C-x C-u, C-/ Cycle through the undo list Note: C = Ctrl, M = Meta Key/modifier (alt or esc)\n","date":"2022-10-26T12:30:00+04:00","permalink":"https://datdhruv.github.io/p/useful-shell-shortcuts/","title":"Useful Shell Shortcuts"},{"content":"SCP SCP, or Secure Copy uses SSH to copy files or directories that you select.\nSince scp relies on ssh, it is available on the recent builds of windows (that pack ssh by default), mac and ofcourse linux.\nYou can even copy files over jump or intermediate connections by specifiying the -o flag, like this:\n1 2 # To copy myfile.txt to /my/dir directory on your remote host scp -o \u0026#39;ProxyJump your.jump.host\u0026#39; myfile.txt remote.internal.host:/my/dir Note that with SSH version 9, SCP now has a SFTP backend rather than the traditional rcp backend. More details can be found in the release notes\nSFTP sftp works like scp\nRSYNC On first use, Rsync copies all files and directories and then it copies only the files and directories that you have changed. It does not copy all the files and directories again.\nThis command is not available on windows, so the not as cross platform as scp or sftp\nThis is extremely useful when you want to copy folder which change often, and can be used as a remote backup solution\n","date":"2022-09-09T11:25:00+04:00","permalink":"https://datdhruv.github.io/p/copying-files-over-a-remote-connection/","title":"Copying Files Over a Remote Connection"},{"content":"On Linux, man 7 environ describes a number of common environment variables, and gives references to other man pages which describe them in more detail. Equivalents exist on other systems; see for example the FreeBSD version. (Historically, Unix V7 had an equivalent in section 5; the BSDs have had this in section 7 since at least BSD4.3.)\nIn general, to look through all the man pages which mention a given environment variable, you can use man -K, which runs a full-text search in all the installed man pages’ sources, with the -w and -i options (which respectively list man pages instead of viewing them, and match the strings’ case):\nman -Kiw TZ\n","date":"2022-08-14T22:20:00+04:00","permalink":"https://datdhruv.github.io/p/a-list-of-unix-environment-variables-on-your-system/","title":"A list of (unix) environment variables on your system"},{"content":"To quickly search through, or re-run one of the previously run command, especially if it is a long one, instead of searching the .hist file, you can just type ctrl r and that will bring up a reverse/back search prompt where it will try to autocomplete the previously run command.\nThe command search from most recently used first, so if the first suggestion is not the command you want, you can keep going back and searching by repeatedly typing ctrl r\n","date":"2022-03-10T12:16:00+04:00","permalink":"https://datdhruv.github.io/p/getting-a-command-from-shell-history-fast/","title":"Getting a command from Shell History, Fast"},{"content":"Onefetch is a command-line Git information tool written in Rust that displays project information and code statistics for a local Git repository directly on your terminal. The tool is completely offline - no network access is required.\nBy default, the repo\u0026rsquo;s information is displayed alongside the dominant language\u0026rsquo;s logo, but you can further configure onefetch to instead use an image - on supported terminals -, a text input or nothing at all.\nIt automatically detects open source licenses from texts and provides the user with valuable information like code distribution, pending changes, number of dependencies (by package manager), top contributors (by number of commits), size on disk, creation date, LOC (lines of code), etc.\nOnefetch can be configured via command-line flags to display exactly what you want, the way you want it to: you can customize ASCII/Text formatting, disable info lines, ignore files \u0026amp; directories, output in multiple formats (Json, Yaml), etc.\nYou can check out this amazing commandline tool here\n","date":"2022-01-19T00:52:00+04:00","permalink":"https://datdhruv.github.io/p/onefetch/","title":"Onefetch"},{"content":"Aliases Python Aliases 1 2 3 alias pip=\u0026#39;python3 -m pip\u0026#39; alias python=\u0026#39;python3\u0026#39; alias py=\u0026#39;python3\u0026#39; ls Alias Because ls does not automagically add color\n1 alias ls=\u0026#39;ls --color\u0026#39; Prompt customization checkout the sourcefile for more, here I am going to detail the customization that I add.\n1 export PROMPT=$\u0026#39;%F{green}%B%n%b%f %F{111}%3~%f %(?.%F{green}\\U279c%f.%F{009}\\U279c%f) \u0026#39; $ : Required for unicode parsing %F\u0026hellip;.%f is for setting Foreground colors, colors specified in {color/color_code} format %B\u0026hellip;.%b for bold text %n for username %m for machine name (condensed) %~ for pwd, but with $HOME prefix, 3 for the number of parent dirs to show alternatively use %d or %/ for full paths \\U0000 for unicode %(?.if_reu\\turn_code_istrue.if_reuturn_code_isfalse) Next we have colorized the output for each case (true/false) 009 is a brighter, non panicy version of red You can invoke the new user install again by running 1 autoload zsh-newuser-install \u0026amp;\u0026amp; zsh-newuser-install -f This will add some autocomplete magic and let you set options for history file etc.\n","date":"2022-01-05T12:00:00+04:00","permalink":"https://datdhruv.github.io/p/zsh-shenanigans/","title":"ZSH Shenanigans"},{"content":"You can download files with curl, just like with wget, using the flag -O\nThe capital -O outputs the file name to be as the same name as the one on the server, but you can also use -o (small o), to name the files as you want, like curl -o filename link-to-file\nThese flags are important, because otherwise, curl will dump the output to stdout.\n","date":"2021-12-26T20:48:00+04:00","permalink":"https://datdhruv.github.io/p/download-files-with-curl/","title":"Download files with curl"},{"content":"When using a laptop as a server, if the SSH connection is laggy, it may be because of a wireless card’s power-saving feature.\nYou can turn this feature off by issuing the command\niw \u0026lt;devname\u0026gt; set power_save off\nYou can view the status of iw using the command\niw \u0026lt;devname\u0026gt; get power_save\nand the device name \u0026lt;devname\u0026gt; using the command ip a\niw is used to show / manipulate wireless devices and their configuration\n","date":"2021-12-24T20:12:56+04:00","permalink":"https://datdhruv.github.io/p/laggy-ssh-server-connections-on-laptops/","title":"Laggy SSH-Server connections on Laptops"},{"content":"After accessing the linux server in the creative lab and then setting up my blog site on a VBox VM, using port-binding, I have started to feel like using whatever Desktop OS (Windows/MacOS/Linux) is just fine.\nWhy SSH Port Forwarding gives you Superpowers\nMost of the usage of this kind of work will be via the terminal itself.\nI am however still struggling with how to use desktop linux, so as to be that one guy who propogates Linux use on the desktop.\nWindows is used everywhere, and admittedly it is much easier to set some stuff like virtualbox up, and get working fast, so that complicates the issue further.\nI also want to use Linux, because I am really comfortable with how it works and I know in depth how it might work, or how things might be set up.\nThink of the Desktop OS as a frontend, and Linux as the backend.\nThe frontend has different set of goals, outcomes and expectations whereas the backend has it\u0026rsquo;s own goals, outcomes and expectations.\nAnd in any scenario, you will be accessing most tools through the terminal, so it doesn\u0026rsquo;t matter what you frontend you use.\nAn aside on using software that your host may not allow you to run Well, in any case, you can always download a virtualization platform and run it on linux!\nFor example, some time ago I had issues running qbittorrent on windows. It would be flagged by the antivirus and would be uninstalled immediately.\nAnd alternative to this restriction is to just install qbittorrent in a Linux VM and get what you want with that. It is a heavier alternative, but well it is an alternative!\n","date":"2021-12-02T22:15:00+04:00","permalink":"https://datdhruv.github.io/p/linux-as-a-backend/","title":"Linux as a Backend"},{"content":"To remove the git history 1 2 3 4 5 6 git checkout --orphan tmp # create a temporary branch git add -A # Add all files and commit them git commit -m \u0026#39;Add files\u0026#39; git branch -D main # Deletes the master branch git branch -m main # Rename the current branch to master git push -f origin main # Force push master branch to Git server ","date":"2021-11-29T12:00:00+04:00","permalink":"https://datdhruv.github.io/p/forget-git-history/","title":"Forget git history"},{"content":"Github removed the https login with username password to push/pull code.\nNow you have to generate a personal access token and use that token instead of the password for those operations.\nThis brings us to git credential manger, you can save the username and password (or the personal access token) with git for https logins, so that you dont have to input it again and again.\nYou can do this with\n1 2 3 4 5 6 7 git config credential.helper store # or git config --global credential.helper store git pull The credentials are then stored in the .git-crendentials file in either the home directory or the repo directory.\n","date":"2021-11-26T12:00:00+04:00","permalink":"https://datdhruv.github.io/p/git-credential-manager/","title":"Git Credential Manager"},{"content":"So, why exactly does ./executable work in Linux and Unix (and .\\ in windows)?\nThe ./ translates to: in the current directory (dot(.) : this, slash(/) : directory)\nNow recall that there is a variable called $PATH in all operating system shells.\nThe role of this variable is to store the path to all the places where system binaries are stored (for eg in /bin or /usr/bin or /sbin)\nAlso remember that shells can then take these binaries as inputs and directly run them like\n1 2 3 4 ls cd python chmod When you have an executable that does not exist in this path, and you want to run, what must you do then? 🧐\n./ ofc!\nIn this way, we specify the complete path to the executable, and hence can run it directly\n.executable does not work because it is a valid directory name.\n/executable does not work because it can mean the root/executable and hence we need ./\n","date":"2021-11-01T12:00:00+04:00","permalink":"https://datdhruv.github.io/p/-in-linux/","title":"./ in Linux"},{"content":"OpenSSH v7.3 onward supports a -J switch and a ProxyJump option, which allow one or more comma-separated jump hosts, so, you can simply do this now:\n1 ssh -J jumpuser1@jumphost1,jumpuser2@jumphost2,...,jumpuserN@jumphostN user@hostbe If you want to bind ports as well, You basically have three possibilities:\nTunnel from localhost to host1:\n1 ssh -L 9999:host2:1234 -N host1 As noted above, the connection from host1 to host2 will not be secured.\nTunnel from localhost to host1 and from host1 to host2:\n1 ssh -L 9999:localhost:9999 host1 ssh -L 9999:localhost:1234 -N host2 This will open a tunnel from localhost to host1 and another tunnel from host1 to host2. However the port 9999 to host2:1234 can be used by anyone on host1. This may or may not be a problem.\nTunnel from localhost to host1 and from localhost to host2:\n1 2 ssh -L 9998:host2:22 -N host1 ssh -L 9999:localhost:1234 -N -p 9998 localhost This will open a tunnel from localhost to host1 through which the SSH service on host2 can be used. Then a second tunnel is opened from localhost to host2 through the first tunnel.\nGo with option 1. If the connection from host1 to host2 needs to be secured, go with option 2. Option 3 is mainly useful to access a service on host2 that is only reachable from host2 itself.\n","date":"2021-10-31T12:00:00+04:00","permalink":"https://datdhruv.github.io/p/multihop-ssh/","title":"Multihop SSH"},{"content":"Index pydoc Pip Setuptools json.tool argparse pyinstaller Note on python packages kivy Preferred LSP pydoc To get help with used defined functions and classes, just run pydoc\neg:\n1 2 3 4 5 6 7 8 9 10 # foo.py def bar(): \u0026#34;\u0026#34;\u0026#34;this is the docstring for bar()\u0026#34;\u0026#34;\u0026#34; print \u0026#39;hello\u0026#39; def baz(): \u0026#34;\u0026#34;\u0026#34;this is the docstring for baz()\u0026#34;\u0026#34;\u0026#34; print \u0026#39;world\u0026#39; After Running pydoc:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ pydoc foo # Note do not include the .py extention Help on module foo: NAME foo FILE /path/to/foo.py FUNCTIONS bar() this is the docstring for bar() baz() this is the docstring for baz() You can also generate an HTML help file:\n1 2 $ pydoc -w foo wrote foo.html When working with larger projects with modules, you need to specify the fully qualified package name to pydoc\n1 2 3 4 5 6 # file path/to/module/submodule.py $ pydoc path.to.module.submodule # If init.py is present, calling pydoc on the higher module works too # path/to/module/__init__.py $ pydoc path.to.module # shows doc in __init__.py Important remember pydoc will call only system docs, to call pydoc while in a virtualenv, you need to call python -m pydoc module_name\nPip Did you know you can install packages that are not in the PyPI with pip install? It needs a setup.py/setup.cfg at the base of the pacakge. (which you need anyway while publishing a python package) But other than that you are all set!\npip install \u0026ldquo;git+protocol://version-control\u0026rdquo; eg:\n1 2 3 4 5 6 7 8 # General syntax pip install \u0026#34;git+https://git.example.com/MyProject.git\u0026#34; # Over ssh git install \u0026#34;git+ssh://git.example.com/MyProject\u0026#34; # Local git repo git install \u0026#34;git+file:///home/user/projects/MyProject\u0026#34; You can also pass a branch name, a commit hash, a tag name or a git ref is possible like so:\n1 2 3 4 git+https://git.example.com/MyProject.git@main#egg=MyProject git+https://git.example.com/MyProject.git@v1.0#egg=MyProject git+https://git.example.com/MyProject.git@da39a3ee5e6b4b0d3255bfef95601890afd80709#egg=MyProject git+https://git.example.com/MyProject.git@refs/pull/123/head#egg=MyProject pip install Local/file/name You can also install local files by doing:\n1 python -m pip install path/to/SomeProject “EDITABLE” INSTALLS “Editable” installs are fundamentally “setuptools develop mode” installs.\nsetuptools For building packages for pip\npyproject.toml\n1 2 3 [build-system] requires = [\u0026#34;setuptools\u0026#34;, \u0026#34;wheel\u0026#34;] build-backend = \u0026#34;setuptools.build_meta\u0026#34; setup.cfg\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 [metadata] name = mypackage version = 0.0.1 [options] packages = mypackage install_requires = docutils \u0026gt;= 0.3 requests \u0026lt;= 0.4 importlib; python_version == \u0026#34;2.6\u0026#34; include_package_data = True [options.entry_points] console_scripts = main = mypkg:some_func Automatic package discovery\n1 2 3 4 5 6 [options] packages = find: [options.packages.find] #optional include=pkg1, pkg2 exclude=pk3, pk4 project structure\n1 2 3 4 ~/mypackage/ pyproject.toml setup.cfg # or setup.py mypackage/__init__.py json tool echo json-file | python3 -m json.tool\nThis outputs the input file (or file stream) into formatted json\nargparse Learned about argparse library of python std lib, it is Amazing!\nperformance of pyinstller is reduced if you use the -F/\u0026ndash;onefile option. This is because pyinstaller needs to unpack everything in a temp direcotry and then run the code, which severly degrades performance.\nUsing the default option or the \u0026ndash;onedir option results in much faster code execution (so use that)\nAs to how to go about uncomplicating the directory stuff, just create a shortcut at the root of the folder and that\u0026rsquo;s that.\npyinstaller Pyinstaller is a python module that creates native binaries out of a python file.\npip install pyinstaller\n-F, \u0026ndash;onefile creates just one standalone executable\nPython packages They are modules! or maybe they are modules and they have and init.py file at the base of the directory. I will experiment more with these and report more.\nalso if you want to import a file from a subdirectory, you need to do from directory import file\nImporting another file from the same directory, is very much possible!!\nJust import the file and you are on!\nKivy All about Kivy: the amazing GUI library of python\nYou can make android apps with kivy, using buildozer, but that is only supported on linux and Mac computers (UNIX)\nThe views and everything else is also much saner than tkinter\nbuildozer: build you need to specify INTERNET under requirements\nPython on windows is very very weird python pip does not work by py -m pip works?!?!\nIdk this was too weird\nPreferred LSP Pylance hands down, is much closer to pycharm\u0026rsquo;s language completion.\n","date":"2021-01-05T12:00:00+04:00","permalink":"https://datdhruv.github.io/p/python-tools/","title":"Python tools"},{"content":"Network Sockets Server side 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 import socket import threading HEADER = 64 # Choose a port PORT = 5050 FORMAT = \u0026#39;utf-8\u0026#39; DISCONNECT_MESSAGE = \u0026#34;!DISCONNECT\u0026#34; # Check your ip address using ifconfig/ipconfig/ip addr # SERVER = \u0026#34;192.168.1.114\u0026#34; # To get based on dynamic hostname # SERVER = socket.gethostbyname(socket.gethostname()) # Symbolic empty string signifies all availiable interfaces SERVER = \u0026#39;\u0026#39; ADDR = (SERVER, PORT) # What kind of address are we going to look for in the connections # SOCK_Stream: Streaming data over the socket server = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # binds the server to the port. first arguemnt of bind is a tuple server.bind((SERVER, PORT)) def handle_client(conn, addr): \u0026#34;\u0026#34;\u0026#34; We are not doing much with the address But the object conn of type socket, that is the read deal. You see, that is the connection/connected object That is like the io stream conn.doThis conn.doThat and other shenanigans :param conn: :param addr: :return: \u0026#34;\u0026#34;\u0026#34; print(f\u0026#34;[NEW CONNECTION] {addr} connected.\u0026#34;) connected = True while connected: # Here the first message from the client will always be the length of the header # knock knock protocol msg_length = conn.recv(HEADER).decode(\u0026#34;utf-8\u0026#34;) # The first message comes in as an empty string. (connection succesful msg) # To get around that, we check if the string is empty or not. if msg_length: msg_length = int(msg_length) # Actual message msg = conn.recv(msg_length).decode(FORMAT) if (msg == \u0026#34;!DISCONNECT\u0026#34;): connected = False print(f\u0026#34;[{addr}] {msg}\u0026#34;) conn.send(\u0026#34;Msg Recv!\u0026#34;.encode(FORMAT)) conn.close() def start(): \u0026#39;\u0026#39;\u0026#39; Listen is the actual thing that makes our server, \u0026#34;our server\u0026#34; That and the server.accept() method \u0026#39;\u0026#39;\u0026#39; print(\u0026#34;[Starting] server is starting\u0026#34;) server.listen() print(f\u0026#34;[SERVER HAS STARTED] Listening on {SERVER}\u0026#34;) while True: # Wait for new connection conn, addr = server.accept() thread = threading.Thread(target=handle_client,args=(conn, addr)) # Notice that we dont have handle_client() and arguemnts to it are passed by args() thread.start() print(f\u0026#34;[ACTIVE CONNECTIONS] {threading.activeCount() - 1}\u0026#34;) start() Client side 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import socket HEADER = 64 # Choose a port PORT = 5050 FORMAT = \u0026#39;utf-8\u0026#39; DISCONNECT_MESSAGE = \u0026#34;!DISCONNECT\u0026#34; # Check your ip address using ifconfig/ipconfig/ip addr SERVER = \u0026#34;192.168.1.114\u0026#34; ADDR = (SERVER, PORT) client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect(ADDR) def send(msg): message = msg.encode(\u0026#39;utf-8\u0026#39;) msg_length = len(message) send_length = str(msg_length).encode(FORMAT) send_length += b\u0026#39; \u0026#39; * (HEADER - len(send_length)) client.send(send_length) client.send(message) print(client.recv(2048).decode(FORMAT)) send(\u0026#34;Hello world\u0026#34;) send(\u0026#34;YOLO\u0026#34;) send(\u0026#34;LALA LAND\u0026#34;) send(DISCONNECT_MESSAGE) ","date":"2020-08-11T12:00:00+04:00","permalink":"https://datdhruv.github.io/p/python-sockets/","title":"Python Sockets"},{"content":"Classes and objects creating and using classes 1 2 3 4 5 class circle(object): def __init__(self,radius,color): self.radius = radius self.color = color RedCircle = circle(10,\u0026#34;Red\u0026#34;) Methods are functions which operate on the class instances 1 2 3 4 5 6 7 8 class rectangle(object): def __init__(self, height, width, color): self.height = height self.width = width self.color = color def add_height(self,h): self.height = self.height + h return(self.radius) List Comprehension 1 2 my_function = lambda a, b, c : a + b my_function(1, 2, 3) ","date":"2020-08-05T12:00:00+04:00","permalink":"https://datdhruv.github.io/p/intermediate-python-concepts/","title":"Intermediate Python Concepts"},{"content":"self =\u0026gt; instances -\u0026gt; methods taking this as the first arguement work on instances\ncls =\u0026gt; classes -\u0026gt; work on the entire class rather than an instance\nboth of them are context-aware\nwhen working with classes, unlike regular methods that take instances as the first arguemnt and unlike class methods that take classes as the first argument, static methods take no arguments\nObject Oriented Concepts with Python to declare a class in python you use the class keyword, if at all you want the class to be empty, you can use the pass keyword\nexample:\n1 2 class Employee: pass Instance variables contain data this is unique to each instance of the class\ninit(self) dunder init is like the default constructor in java\nself is (a reference to) THE INSTANCE ITSELF, which the initialize receives automatically and that is not restricted to self but self is the convention\nhere\u0026rsquo;s what we mean: say we created that employee class, when we set a variable of the class, say first name, instead of doing emp1.first = \u0026quot;lala\u0026quot;, we do self.first = \u0026quot;lala\u0026quot;. Here emp1 is the instance and self is the placeholder for the instance\nThe first parameter of any class method is always the instance (which we have named self). Then when we create new instances we dont have to pass that instance/self.\nThe init method will be run automatically, emp1 is passed to the self attribute\nexample:\n1 2 3 4 5 6 7 8 9 10 11 12 13 class Employee: def __init__(self, first, last, pay): self.first = first self.last = last self.pay = pay self.email = first + \u0026#39;.\u0026#39; + last + \u0026#34;@company.com\u0026#34; def fullname(self): print(\u0026#34;{} {}\u0026#34;.format(self.first, self.last)) # The init method will be run automatically, emp1 is passed to the self attribute emp1 = Employee(\u0026#34;Dhruv\u0026#34; ,\u0026#34;Jain\u0026#34;, 50000) When this is run the init method is run automatically\nIf you dont pass in the self method, you get this error:\n1 2 3 4 Traceback (most recent call last): File \u0026#34;.\\learning-computing\\python-oop\\HelloWorld.py\u0026#34;, line 20, in \u0026lt;module\u0026gt; emp1.fullname() TypeError: fullname() takes 0 positional arguments but 1 was given This error arises because the class gives in the instance/self argument to the class-method, but here we said that the method does NOT take any argument. That is why this error aries.\ncalling class method from the class rather than the instance 1 2 3 4 5 # Calling class-method from instance emp1.fullname() # Calling class-method from class Employee.fullname(emp1) class variable class variables are variables that are same for all instances of a class when the instance is initialized\nwhen a variable is called, python will first check if the variable exists in the namespace of the instance, if it does not exist, then python will check for it in the classes the instance inherits from.\nclass variables can be accessed via instances as well as classes:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Employee: num_of_emps = 0 raise_amount = 1.04 def __init__(self, first, last, pay): self.first = first # same things as before Employee.num_of_emps += 1 def fullname(self): print(\u0026#34;{} {}\u0026#34;.format(self.first, self.last)) def apply_raise(self): self.pay = int(self.pay * self.raise_amount) # if we hardcoded this to Employees.raise_amount, # instances cannot update this emp1 = Employee() # Employee.raise_amount == 1.04 # emp1.raise_amount == 1.04 emp1.raise_amount = 1.5 # now emp1.raise_amount == 1.5 # BUT Employee.raise_amount == 1.04 # self.raise_amount is a general case of emp1.raise_amount a_name.lol -\u0026gt; hardcoded value of the class self.lol -\u0026gt; can be changed by instances emp1.lol -\u0026gt; are instance variables inherited from class or are set afterwards\nClass methods to define a class method, we use the decorator @classmethod one line above the method.\nWhat class methods do is that they manipulate the whole class along with all instances of the class\nThink of them as static methods (as seen in java)\nLike the self convention used for instances in python, classes have a convention called cls\n1 2 3 4 5 6 7 class Employee raise_amt = 1.04 @classmethod def set_raise_amount(cls, amount): cls.raise_amt = amount # or do something class methods as custom constructors class methods can be used to construct new classes as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Employee: num_of_emps = 0 def __init__(self, first, last, pay): self.first = first self.last = last self.pay = pay Employee.num_of_emps += 1 def fullname(self): print(\u0026#34;{} {}\u0026#34;.format(self.first, self.last)) @classmethod def from_string(cls, emp_str): first, last, pay = emp_str.split(\u0026#34;-\u0026#34;) return cls(first, last, pay) # Most important point here # return a class object after parsing string emp3_string = \u0026#34;water bottle\u0026#34; emp3 = Employee.from_string(emp3_string) print(Employee.num_of_emps) emp3.fullname() In the above example, the cls() is a class constructor. It creates a class object from by applying the given logic\nStatic methods when working with classes, unlike regular methods that take instances as the first arguemnt and unlike class methods that take classes as the first argument, static methods take no arguments\nuse static methods where you dont need to use any of the class\u0026rsquo;s variables or functions. In the example we are using, this may be the day of the week, which is entirely independent of the name or pay or anything else from the class really.\ncreating a staticmethod:\nusing staticmethod() function\n1 2 3 4 5 6 7 8 def addNumbers(x, y): return x + y # create addNumbers static method Calculator.addNumbers = staticmethod(Calculator.addNumbers) print(\u0026#39;Product:\u0026#39;, Calculator.addNumbers(15, 110)) using @staticmethod decorator\n1 2 3 4 5 6 7 # create addNumbers static method @staticmethod def addNumbers(x, y): return x + y print(\u0026#39;Product:\u0026#39;, Calculator.addNumbers(15, 110)) Inherititance to inherit a class\u0026rsquo;s attributes in anohter class, just pass it as an arguement to the inheriting class eg class Developer(Employee):\nremeber python resolves methods and variables as:\ncurrent class object parent class object parent\u0026rsquo;s parent class object and so on\nsuper() To call the methods of a class above the current class, use super, for eg:\n1 2 3 4 5 6 7 8 class Developer(Employee): raise_amount = 1.10 # Can you think why this first, last ... is being passed down? # Think. # You need to do the same with *args and **kwargs also def __init__(self, first, last, pay, prog_lang): super().__init__(first, last, pay) self.prog_lang = prog_lang oh and while using super, you dont need to pass through self in the super().__init__(), however you need to pass ALL the fields of the super class in the class\u0026rsquo;s __init__\nMost of the code uptill now 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class Employee: num_of_emps = 0 raise_amount = 1.04 def __init__(self, first, last, pay): self.first = first self.last = last self.pay = pay self.email = first + \u0026#39;.\u0026#39; + last + \u0026#34;@company.com\u0026#34; Employee.num_of_emps += 1 def fullname(self): print(\u0026#34;{} {}\u0026#34;.format(self.first, self.last)) def apply_raise(self): self.pay = int(self.pay * self.raise_amount) # if we hardcoded this to Employees.raise_amount, instances cannot update this value @classmethod def from_string(cls, emp_str): first, last, pay = emp_str.split(\u0026#34;-\u0026#34;) return cls(first, last, pay) @staticmethod def is_workday(day): if day.weekday() == 5 or day.weekday() == 6: return False else: return True class Developer(Employee): raise_amount = 1.10 def __init__(self, first, last, pay, prog_lang): super().__init__(first, last, pay) self.prog_lang = prog_lang class Manager(Employee): def __init__(self, first, last, pay, employees): super().__init__(first, last, pay) if employees == None: self.employees = [] else: self.employees = employees def add_emp(self, emp): if emp not in self.employees: self.employees.append(emp) def remove_emp(self, emp): if emp in self.employees: self.employees.remove(emp) def disp_emp(self): for i in self.employees: print(emp.fullname()) dev1 = Developer(\u0026#34;Dhruv\u0026#34; ,\u0026#34;Jain\u0026#34;, 50000, \u0026#34;python\u0026#34;) dev2 = Developer(\u0026#34;Mamma\u0026#34;, \u0026#34;Hand\u0026#34;, 60000, \u0026#34;java\u0026#34;) #print(dev1.pay) #dev1.apply_raise() #print(dev1.pay) # dev1.fullname() # dev2.fullname() mgr1 = Manager(\u0026#34;sue\u0026#34;, \u0026#34;smith\u0026#34;, 70000, [dev1]) #print(isinstance(mgr1, Manager)) #print(isinstance(mgr1, Employee)) #print(isinstance(mgr1, Developer)) print(issubclass(Manager, Employee)) Magic methods allows us to emulate built in behaviour within python and allows us to implement operator overloading\n1 2 3 4 5 6 7 8 9 def __repr__(self): # return a string for the DEVELOPERS to see def __str__(self): # return stuff for the END USERS to see def __add__(self, other): # defines how to add datatypes # And Yes, other is a convention Property decorators property decorators allows methods to be accessed as variables rather than a function call\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Employee: def __init__(self, first, last, pay): self.first = first self.last = last #self.email = first + \u0026#39;.\u0026#39; + last + \u0026#34;@company.com\u0026#34; @property def email(self): return(\u0026#34;{}.{}@email.com\u0026#34;.format(self.first, self.last)) @property def fullname(self): return(\u0026#34;{} {}\u0026#34;.format(se lf.first, self.last)) emp1 = Employee(\u0026#34;shriyas\u0026#34;,\u0026#34;Iyer\u0026#34;, 50000) emp2 = Employee(\u0026#34;Vikrant\u0026#34;, \u0026#34;Tiru\u0026#34;, 70000) print(emp1.email) Setter decorators and functions To use the Setter decorator, use the method name you want to define along with .setter, for eg:\n1 2 3 4 5 @fullname.setter def fullname(self, name): first, last = name.split(\u0026#34; \u0026#34;) self.first = first self.last = last deleter decorator To use a deleter decorator, use the method name you want to use along with .deleter, and then while deleting, use the del keyword\n1 2 3 4 5 6 7 @fullname.deleter def fullname(self): print(\u0026#34;Deleting name\u0026#34;) self.first = None self.last = None del emp1.fullname Self == main?? it is if __name__ == \u0026quot;__main__\u0026quot;!!!\nname signifies name of the caller or something. main is the caller then!\n","date":"2020-01-05T12:00:00+04:00","permalink":"https://datdhruv.github.io/p/python-oops-concepts/","title":"Python OOPS Concepts"},{"content":"Regex Concepts To escape characters you need to use \\ escape characters, for eg if you want to search for a \u0026ldquo;?\u0026rdquo; or \u0026ldquo;.\u0026rdquo; or \u0026ldquo;\u0026quot;, use backslash \\., \\?, \\\\. If you want to search for an email address eg: name@example.com, use: name@example\\.com\n. -\u0026gt; matches any character except newline character\n\\d matches digits (anything from 0-9)\n\\D matches anything BUT a digit\n\\w searches for any alphanumeric character (a-z,A-Z,0-9)\n\\W matches anything that is not an alphanumeric character\n\\s matches whitespaces (space, tab, newline)\n\\S matches anthing that is not a whitespace\nAnchors - dont match characters but special positions special posiotions like starting of the line, ending of the line etc\n\\b matches word at boundries\n\\B matches word that are not word boundries\nfor eg: Ha HaHa, \\bHa matches Ha HaHa but not Ha HaHa. \\bHa\\b matches word boundries both at the end and at the begining: Ha HaHa only matches where Ha\\b matches Ha HaHa\n^ matches start of the line\n^Ha matches only Ha bro HaHa HaHa, because the line starts with an Ha\n$ matches end of line\n$Ha only matches Ha bro HaHa HaHa beacause it is at the end of the line\ncharacter sets [] -\u0026gt; matches character set inside the brackets.(NO SPACES) eg [-*\u0026amp;a1] etc. Matches only the first character in the sequence.\n- has a special meaning in character sets []. when at the start, it matches for the character \u0026lsquo;-\u0026rsquo;, but when in between it is used to specify a range. eg to match numbers from 1 to 7: [1-7], or matching a-d: [a-d]\ncaret ^ also has special meaning and stands for \u0026ldquo;everything except\u0026rdquo;. For eg to match al characters that are not a lower case letter: [^a-z]\nQuantifiers: matching more than one character at a time matches 0 or more instances matches 1 or more ? matches 0 or one instances {} matches exact numbers. eg a{3} -\u0026gt; a three times works same for \\d \\s \\w stuffs {num1, num2} matches an range of numbers and follows {min, max} range. eg a{1,3} one to three repetitions of a. works same for \\d \\s \\w stuffs Groups: allows us to specify different matches groups are defined using parenthesis ()\nfor eg: to match Mr, Ms, Mrs:\nM(r|s|rs)\npipe operator (|) is used to for \u0026ldquo;OR\u0026rdquo; in groups\nBack references the values in groups are stored in something called back groups.\nin vscode you can call them with $grpnum (eg $2) to replace them in replace mode in \u0026ldquo;find\u0026rdquo;\nhowever usually it is \\num eg \\2 for group 2\nExamples matching phone numbers 321-555-4321\n123.555.1234\nsoln -\u0026gt; \\d\\d\\d\\W\\d\\d\\d\\W\\d\\d\\d\\d, dig dig dig non-whitespace dig\u0026hellip;..\ncharacter matching\ncat\nmat\npat\nbat\nmatch everything except bat\n[^b]at\nIn Python remember to convert the string containing regular expressions to raw form: eg r\u0026quot;hello\u0026quot;. This is done so that python does not take expressions with a leading backslash and escape sequesces of it\u0026rsquo;s own.\n1 2 3 4 5 6 7 8 9 import re urls = \u0026#39;\u0026#39;\u0026#39;for groups match.group(grp_num) eg match.group(3) \u0026#39;\u0026#39;\u0026#39; # Substitutions subbed_urls = pattern.sub(r\u0026#39;\u0026#39;) ","date":"2020-01-05T12:00:00+04:00","permalink":"https://datdhruv.github.io/p/regex-concepts/","title":"Regex concepts"},{"content":"Installing Kali linux on Raspberry Pi Flash the image on to the sd card (I recommend using balena etcher) Before putting the SD card into the pi, in the boot folder, create a ssh file (just touch ssh in the boot folder) now come the more tricky part. connect the pi to the router (with a wire) and then ssh into it. use nmtui to to set up the network now you have to enable ssh at each subsequent boot. This is done using sudo systemctl enable ssh.service And you are done! ✨🎉🎊🎆\n","date":"2019-12-25T12:00:00+04:00","permalink":"https://datdhruv.github.io/p/installing-kali-linux-on-raspberry-pi-when-you-have-no-monitor/","title":"Installing kali linux on Raspberry pi when you have no monitor"},{"content":"Notes on making a Web Scraper in Java First things first. A Web Request Library Before we can start to scrape anything, we will need a way to send and receive web requests. There are multiple ways to do this in java with various libraries, however we will use java.net.http.HttpClient which was released with java 11.\nLet\u0026rsquo;s create a simple request:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package org.datdhruv; import java.io.IOException; import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; public class Main { public static void main(String[] args) throws IOException, InterruptedException { var client = HttpClient.newHttpClient(); HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(\u0026#34;https://datdhruv.me\u0026#34;)) .build(); var response = client.send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); } } First we import java.net.URI, java.net.http.HttpClient, java.net.http.HttpRequest, java.net.http.HttpResponse. These are required for our requests to run.\nThe HttpRequest Object builds a query with the specified uri. This can be passed to the client to get a response. HttpResponse.BodyHandlers.ofString(); allows us to use the response body and parse it as a utf-8 encoded string.\nIf the query succeeds, you get the result in a HttpResponse object, from which you can operate on using methods like .body().\nIf the query fails, it throws an exception which needs to be handled. Hence we add the IOException and InterruptedException.\nHere\u0026rsquo;s the documentation for the same\nto escape % in a java string, you need to double it 1 private String payload = \u0026#34;{\\\u0026#34;requests\\\u0026#34;: [{\\\u0026#34;indexName\\\u0026#34;: \\\u0026#34;prod_all_launched_products_term_optimization\\\u0026#34;,\\\u0026#34;params\\\u0026#34;: \\\u0026#34;query=%s\u0026amp;hitsPerPage=5\u0026amp;facetFilters=%%5B%%5B%%22allLanguages%%3AEnglish%%22%%5D%%5D\\\u0026#34;}]}\u0026#34;; Auth 1 2 3 4 5 6 7 String encoding = Base64Encoder.encode (\u0026#34;test1:test1\u0026#34;); HttpPost httppost = new HttpPost(\u0026#34;http://host:post/test/login\u0026#34;); httppost.setHeader(\u0026#34;Authorization\u0026#34;, \u0026#34;Basic \u0026#34; + encoding); System.out.println(\u0026#34;executing request \u0026#34; + httppost.getRequestLine()); HttpResponse response = httpclient.execute(httppost); HttpEntity entity = response.getEntity(); Returning from a thread You cant return from a thread. The workaround is to create a run method that writes to an internal variable. Then have a get method defined on that variable.\nUsually you would do it something like this\n1 2 3 4 5 6 7 8 9 10 11 12 public class Foo implements Runnable { private volatile int value; @Override public void run() { value = 2; } public int getValue() { return value; } } Then you can create the thread and retrieve the value (given that the value has been set)\n1 2 3 4 5 Foo foo = new Foo(); Thread thread = new Thread(foo); thread.start(); thread.join(); int value = foo.getValue(); tl;dr a thread cannot return a value (at least not without a callback mechanism). You should reference a thread like an ordinary class and ask for the value.\n","date":"0001-01-01T00:00:00Z","permalink":"https://datdhruv.github.io/p/","title":""}]