<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cli on datDhruv's Blog</title><link>https://datdhruv.github.io/categories/cli/</link><description>Recent content in cli on datDhruv's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 26 May 2023 22:30:00 +0400</lastBuildDate><atom:link href="https://datdhruv.github.io/categories/cli/index.xml" rel="self" type="application/rss+xml"/><item><title>Find Patterns in a directory with grep</title><link>https://datdhruv.github.io/p/find-patterns-in-a-directory-with-grep/</link><pubDate>Fri, 26 May 2023 22:30:00 +0400</pubDate><guid>https://datdhruv.github.io/p/find-patterns-in-a-directory-with-grep/</guid><description>&lt;p>Recently I had to lookup a usage for function in a project I was working on.&lt;/p>
&lt;p>This is relatively an easy task with vscode. You just open the search in files menu, type what you are looking for, and off you go.&lt;/p>
&lt;p>This made me wonder, how would you achieve this task in the command line with something like grep?&lt;/p>
&lt;p>There is an amazing tool which specializes in this activity: &lt;code>ripgrep&lt;/code>, however I was determined to complete this task with just grep.&lt;/p>
&lt;p>Here&amp;rsquo;s what you do:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep --color -r pattern_to_search
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This will recursively search for the given pattern in all files in the directory (and the subdiretory)&lt;/p>
&lt;p>You can even exclude a directly (like &lt;code>.git&lt;/code>)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep --color -r --exclude-dir&lt;span class="o">=&lt;/span>.git pattern_to_search
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Get a Brief of Ip command (with Color)</title><link>https://datdhruv.github.io/p/get-a-brief-of-ip-command-with-color/</link><pubDate>Sun, 25 Dec 2022 11:25:00 +0400</pubDate><guid>https://datdhruv.github.io/p/get-a-brief-of-ip-command-with-color/</guid><description>&lt;p>The default &lt;code>ip addr&lt;/code> command, which gives you ip address of your device, is cluttered with alot of values, which may not be useful to you. To quickly get the output, you can pass the &lt;code>-br&lt;/code> or &lt;code>--brief&lt;/code> argument, which outputs a brief of the network statistic.&lt;/p>
&lt;p>Additionally you can get color output by passing the &lt;code>-c&lt;/code> or &lt;code>--color&lt;/code> argument.&lt;/p>
&lt;p>&lt;img src="https://datdhruv.github.io/p/get-a-brief-of-ip-command-with-color/ip-brief-output.png"
width="2640"
height="1194"
srcset="https://datdhruv.github.io/p/get-a-brief-of-ip-command-with-color/ip-brief-output_huecd3e24273e1c413adddcaf92a2540f7_387249_480x0_resize_box_3.png 480w, https://datdhruv.github.io/p/get-a-brief-of-ip-command-with-color/ip-brief-output_huecd3e24273e1c413adddcaf92a2540f7_387249_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="221"
data-flex-basis="530px"
>&lt;/p></description></item><item><title>Useful Shell Shortcuts</title><link>https://datdhruv.github.io/p/useful-shell-shortcuts/</link><pubDate>Wed, 26 Oct 2022 12:30:00 +0400</pubDate><guid>https://datdhruv.github.io/p/useful-shell-shortcuts/</guid><description>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>ESC f&lt;/code>, &lt;code>ESC b&lt;/code>&lt;/td>
&lt;td>Go forward/backword one word&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CTRL a&lt;/code>, &lt;code>CTRL e&lt;/code>&lt;/td>
&lt;td>Go to start/end of line&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>~ C&lt;/code>&lt;/td>
&lt;td>Enter SSH Command Mode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-b&lt;/code>, &lt;code>C-f&lt;/code>&lt;/td>
&lt;td>Move backward/forward one character&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>M-b&lt;/code>, &lt;code>M-f&lt;/code>&lt;/td>
&lt;td>Move backward/forward by word&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-a&lt;/code>, &lt;code>C-e&lt;/code>&lt;/td>
&lt;td>Move to the beginning/end of the line&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-w&lt;/code>, &lt;code>M-d&lt;/code>&lt;/td>
&lt;td>Kill word backward/forward&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-d&lt;/code>, &lt;code>Backspace&lt;/code>&lt;/td>
&lt;td>Delete char forward/backward&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-d&lt;/code>&lt;/td>
&lt;td>may send EOF on an empty line&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>M-.&lt;/code>&lt;/td>
&lt;td>cycle through the argument to the previous commands&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-k&lt;/code>, &lt;code>C-u&lt;/code>&lt;/td>
&lt;td>Kill (to clipboard) to end of line/beginning of line&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-y&lt;/code>&lt;/td>
&lt;td>Yank from kill ring&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>M-y&lt;/code> (after &lt;code>C-y&lt;/code>)&lt;/td>
&lt;td>Cycle through kill ring history&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-t&lt;/code>, &lt;code>M-t&lt;/code>&lt;/td>
&lt;td>Transpose character/word&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>M-u&lt;/code>, &lt;code>M-l&lt;/code>, &lt;code>M-c&lt;/code>&lt;/td>
&lt;td>Upper, lower, or capitalize forward word&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-_&lt;/code>, &lt;code>C-x C-u&lt;/code>, &lt;code>C-/&lt;/code>&lt;/td>
&lt;td>Cycle through the undo list&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;em>Note&lt;/em>: &lt;code>C&lt;/code> = &lt;code>Ctrl&lt;/code>, &lt;code>M&lt;/code> = Meta Key/modifier (&lt;code>alt&lt;/code> or &lt;code>esc&lt;/code>)&lt;/p></description></item><item><title>Getting a command from Shell History, Fast</title><link>https://datdhruv.github.io/p/getting-a-command-from-shell-history-fast/</link><pubDate>Thu, 10 Mar 2022 12:16:00 +0400</pubDate><guid>https://datdhruv.github.io/p/getting-a-command-from-shell-history-fast/</guid><description>&lt;p>To quickly search through, or re-run one of the previously run command, especially if it is a long one, instead of searching the &lt;code>.hist&lt;/code> file, you can just type &lt;code>ctrl r&lt;/code> and that will bring up a reverse/back search prompt where it will try to autocomplete the previously run command.&lt;/p>
&lt;p>The command search from most recently used first, so if the first suggestion is not the command you want, you can keep going back and searching by repeatedly typing &lt;code>ctrl r&lt;/code>&lt;/p></description></item><item><title>Onefetch</title><link>https://datdhruv.github.io/p/onefetch/</link><pubDate>Wed, 19 Jan 2022 00:52:00 +0400</pubDate><guid>https://datdhruv.github.io/p/onefetch/</guid><description>&lt;p>Onefetch is a command-line Git information tool written in Rust that displays project information and code statistics for a local Git repository directly on your terminal. The tool is completely offline - no network access is required.&lt;/p>
&lt;p>By default, the repo&amp;rsquo;s information is displayed alongside the dominant language&amp;rsquo;s logo, but you can further configure onefetch to instead use an image - on supported terminals -, a text input or nothing at all.&lt;/p>
&lt;p>It automatically detects open source licenses from texts and provides the user with valuable information like code distribution, pending changes, number of dependencies (by package manager), top contributors (by number of commits), size on disk, creation date, LOC (lines of code), etc.&lt;/p>
&lt;p>Onefetch can be configured via command-line flags to display exactly what you want, the way you want it to: you can customize ASCII/Text formatting, disable info lines, ignore files &amp;amp; directories, output in multiple formats (Json, Yaml), etc.&lt;/p>
&lt;p>You can check out this amazing commandline tool &lt;a class="link" href="https://github.com/o2sh/onefetch" target="_blank" rel="noopener"
>here&lt;/a>&lt;/p></description></item><item><title>ZSH Shenanigans</title><link>https://datdhruv.github.io/p/zsh-shenanigans/</link><pubDate>Wed, 05 Jan 2022 12:00:00 +0400</pubDate><guid>https://datdhruv.github.io/p/zsh-shenanigans/</guid><description>&lt;h2 id="aliases">Aliases&lt;/h2>
&lt;h4 id="python-aliases">Python Aliases&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">pip&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;python3 -m pip&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">python&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;python3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">py&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;python3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="ls-alias">ls Alias&lt;/h4>
&lt;p>Because ls does not automagically add color&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">ls&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;ls --color&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="prompt-customization">Prompt customization&lt;/h2>
&lt;p>checkout the &lt;a class="link" href="https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion" target="_blank" rel="noopener"
>sourcefile&lt;/a> for more, here I am going to detail the customization that I add.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">PROMPT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">$&amp;#39;%F{green}%B%n%b%f %F{111}%3~%f %(?.%F{green}\U279c%f.%F{009}\U279c%f) &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>$ : Required for unicode parsing&lt;/li>
&lt;li>%F&amp;hellip;.%f is for setting Foreground colors,&lt;/li>
&lt;li>colors specified in {color/color_code} format&lt;/li>
&lt;li>%B&amp;hellip;.%b for bold text&lt;/li>
&lt;li>%n for username&lt;/li>
&lt;li>%m for machine name (condensed)&lt;/li>
&lt;li>%~ for pwd, but with $HOME prefix,&lt;/li>
&lt;li>3 for the number of parent dirs to show&lt;/li>
&lt;li>alternatively use %d or %/ for full paths&lt;/li>
&lt;li>\U0000 for unicode&lt;/li>
&lt;li>%(?.if_reu\turn_code_istrue.if_reuturn_code_isfalse)&lt;/li>
&lt;li>Next we have colorized the output for each case (true/false)&lt;/li>
&lt;li>009 is a brighter, non panicy version of red&lt;/li>
&lt;/ul>
&lt;h2 id="you-can-invoke-the-new-user-install-again-by-running">You can invoke the new user install again by running&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">autoload zsh-newuser-install &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> zsh-newuser-install -f
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This will add some autocomplete magic and let you set options for history file etc.&lt;/p></description></item><item><title>Download files with curl</title><link>https://datdhruv.github.io/p/download-files-with-curl/</link><pubDate>Sun, 26 Dec 2021 20:48:00 +0400</pubDate><guid>https://datdhruv.github.io/p/download-files-with-curl/</guid><description>&lt;p>You can download files with curl, just like with wget, using the flag &lt;code>-O&lt;/code>&lt;/p>
&lt;p>The capital &lt;code>-O&lt;/code> outputs the file name to be as the same name as the one on the server, but you can also use &lt;code>-o&lt;/code> (small o), to name the files as you want, like &lt;code>curl -o filename link-to-file&lt;/code>&lt;/p>
&lt;p>These flags are important, because otherwise, curl will dump the output to stdout.&lt;/p></description></item></channel></rss>