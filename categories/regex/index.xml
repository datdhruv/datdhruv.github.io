<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>regex on datDhruv's Blog</title><link>https://datdhruv.github.io/categories/regex/</link><description>Recent content in regex on datDhruv's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 26 May 2023 22:30:00 +0400</lastBuildDate><atom:link href="https://datdhruv.github.io/categories/regex/index.xml" rel="self" type="application/rss+xml"/><item><title>Find Patterns in a directory with grep</title><link>https://datdhruv.github.io/p/find-patterns-in-a-directory-with-grep/</link><pubDate>Fri, 26 May 2023 22:30:00 +0400</pubDate><guid>https://datdhruv.github.io/p/find-patterns-in-a-directory-with-grep/</guid><description>&lt;p>Recently I had to lookup a usage for function in a project I was working on.&lt;/p>
&lt;p>This is relatively an easy task with vscode. You just open the search in files menu, type what you are looking for, and off you go.&lt;/p>
&lt;p>This made me wonder, how would you achieve this task in the command line with something like grep?&lt;/p>
&lt;p>There is an amazing tool which specializes in this activity: &lt;code>ripgrep&lt;/code>, however I was determined to complete this task with just grep.&lt;/p>
&lt;p>Here&amp;rsquo;s what you do:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep --color -r pattern_to_search
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This will recursively search for the given pattern in all files in the directory (and the subdiretory)&lt;/p>
&lt;p>You can even exclude a directly (like &lt;code>.git&lt;/code>)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">grep --color -r --exclude-dir&lt;span class="o">=&lt;/span>.git pattern_to_search
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Regex concepts</title><link>https://datdhruv.github.io/p/regex-concepts/</link><pubDate>Sun, 05 Jan 2020 12:00:00 +0400</pubDate><guid>https://datdhruv.github.io/p/regex-concepts/</guid><description>&lt;h1 id="regex-concepts">Regex Concepts&lt;/h1>
&lt;p>To escape characters you need to use &lt;code>\&lt;/code> escape characters, for eg if you want to search for a &amp;ldquo;?&amp;rdquo; or &amp;ldquo;.&amp;rdquo; or &amp;ldquo;&amp;quot;, use backslash &lt;code>\.&lt;/code>, &lt;code>\?&lt;/code>, &lt;code>\\&lt;/code>. If you want to search for an email address eg: &lt;a class="link" href="mailto:name@example.com" >name@example.com&lt;/a>, use: &lt;code>name@example\.com&lt;/code>&lt;/p>
&lt;p>. -&amp;gt; matches any character except newline character&lt;/p>
&lt;p>\d matches digits (anything from 0-9)&lt;/p>
&lt;p>\D matches anything BUT a digit&lt;/p>
&lt;p>\w searches for any alphanumeric character (a-z,A-Z,0-9)&lt;/p>
&lt;p>\W matches anything that is not an alphanumeric character&lt;/p>
&lt;p>\s matches whitespaces (space, tab, newline)&lt;/p>
&lt;p>\S matches anthing that is not a whitespace&lt;/p>
&lt;h4 id="anchors---dont-match-characters-but-special-positions">Anchors - dont match characters but special positions&lt;/h4>
&lt;p>special posiotions like starting of the line, ending of the line etc&lt;/p>
&lt;p>\b matches word at boundries&lt;/p>
&lt;p>\B matches word that are not word boundries&lt;/p>
&lt;p>for eg: Ha HaHa, &lt;code>\bHa&lt;/code> matches &lt;strong>Ha Ha&lt;/strong>Ha but not Ha Ha&lt;em>Ha&lt;/em>. &lt;code>\bHa\b&lt;/code> matches word boundries both at the end and at the begining: &lt;strong>Ha&lt;/strong> HaHa only matches where &lt;code>Ha\b&lt;/code> matches &lt;strong>Ha&lt;/strong> Ha&lt;strong>Ha&lt;/strong>&lt;/p>
&lt;p>^ matches start of the line&lt;/p>
&lt;p>^Ha matches only &lt;strong>Ha&lt;/strong> bro HaHa HaHa, because the line starts with an Ha&lt;/p>
&lt;p>$ matches end of line&lt;/p>
&lt;p>$Ha only matches Ha bro HaHa Ha&lt;strong>Ha&lt;/strong> beacause it is at the end of the line&lt;/p>
&lt;h3 id="character-sets">character sets&lt;/h3>
&lt;p>[] -&amp;gt; matches character set inside the brackets.(NO SPACES) eg [-*&amp;amp;a1] etc.
Matches only the first character in the sequence.&lt;/p>
&lt;p>- has a special meaning in character sets []. when at the start, it matches for the character &amp;lsquo;-&amp;rsquo;, but when in between it is used to specify a range. eg to match numbers from 1 to 7: [1-7], or matching a-d: [a-d]&lt;/p>
&lt;p>caret ^ also has special meaning and stands for &amp;ldquo;everything except&amp;rdquo;. For eg to match al characters that are not a lower case letter: [^a-z]&lt;/p>
&lt;h4 id="quantifiers-matching-more-than-one-character-at-a-time">Quantifiers: matching more than one character at a time&lt;/h4>
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>matches 0 or more instances&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>matches 1 or more&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>? matches 0 or one instances&lt;/li>
&lt;li>{} matches exact numbers. eg a{3} -&amp;gt; a three times works same for \d \s \w stuffs&lt;/li>
&lt;li>{num1, num2} matches an range of numbers and follows {min, max} range. eg a{1,3} one to three repetitions of a. works same for \d \s \w stuffs&lt;/li>
&lt;/ul>
&lt;h3 id="groups-allows-us-to-specify-different-matches">Groups: allows us to specify different matches&lt;/h3>
&lt;p>groups are defined using parenthesis ()&lt;/p>
&lt;p>for eg: to match Mr, Ms, Mrs:&lt;/p>
&lt;p>M(r|s|rs)&lt;/p>
&lt;p>pipe operator (|) is used to for &amp;ldquo;OR&amp;rdquo; in groups&lt;/p>
&lt;h4 id="back-references">Back references&lt;/h4>
&lt;p>the values in groups are stored in something called back groups.&lt;/p>
&lt;p>in vscode you can call them with $grpnum (eg $2) to replace them in replace mode in &amp;ldquo;find&amp;rdquo;&lt;/p>
&lt;p>however usually it is \num eg \2 for group 2&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;ul>
&lt;li>matching phone numbers&lt;/li>
&lt;/ul>
&lt;p>321-555-4321&lt;/p>
&lt;p>123.555.1234&lt;/p>
&lt;p>soln -&amp;gt; \d\d\d\W\d\d\d\W\d\d\d\d, dig dig dig non-whitespace dig&amp;hellip;..&lt;/p>
&lt;ul>
&lt;li>
&lt;p>character matching&lt;/p>
&lt;p>cat&lt;/p>
&lt;p>mat&lt;/p>
&lt;p>pat&lt;/p>
&lt;p>bat&lt;/p>
&lt;p>match everything except bat&lt;/p>
&lt;p>[^b]at&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="in-python">In Python&lt;/h1>
&lt;p>remember to convert the string containing regular expressions to raw form: eg &lt;code>r&amp;quot;hello&amp;quot;&lt;/code>. This is done so that python does not take expressions with a leading backslash and escape sequesces of it&amp;rsquo;s own.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">re&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">urls&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;for groups
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">match.group(grp_num) eg match.group(3)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Substitutions&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">subbed_urls&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pattern&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sub&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sa">r&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>