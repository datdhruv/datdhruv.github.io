<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cli on Dhruv's Blog</title><link>http://typdef.com/tags/cli/</link><description>Recent content in Cli on Dhruv's Blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 01 Mar 2024 22:45:00 +0400</lastBuildDate><atom:link href="http://typdef.com/tags/cli/index.xml" rel="self" type="application/rss+xml"/><item><title>Change the time zone data on Linux</title><link>http://typdef.com/posts/linux/change-time-zone/</link><pubDate>Fri, 01 Mar 2024 22:45:00 +0400</pubDate><guid>http://typdef.com/posts/linux/change-time-zone/</guid><description>The main step to do here is to configure the tzdata package
Then choose the appropriate timezone info
Ubuntu sudo dpkg-reconfigure tzdata</description></item><item><title>Find Patterns in a directory with grep</title><link>http://typdef.com/posts/cli/recursive-grep/</link><pubDate>Fri, 26 May 2023 22:30:00 +0400</pubDate><guid>http://typdef.com/posts/cli/recursive-grep/</guid><description>Recently I had to lookup a usage for function in a project I was working on.
This is relatively an easy task with vscode. You just open the search in files menu, type what you are looking for, and off you go.
This made me wonder, how would you achieve this task in the command line with something like grep?
There is an amazing tool which specializes in this activity: ripgrep, however I was determined to complete this task with just grep.</description></item><item><title>Get a Brief of Ip command (with Color)</title><link>http://typdef.com/posts/cli/ip-brief-output/</link><pubDate>Sun, 25 Dec 2022 11:25:00 +0400</pubDate><guid>http://typdef.com/posts/cli/ip-brief-output/</guid><description>The default ip addr command, which gives you ip address of your device, is cluttered with alot of values, which may not be useful to you. To quickly get the output, you can pass the -br or --brief argument, which outputs a brief of the network statistic.
Additionally you can get color output by passing the -c or --color argument.</description></item><item><title>Useful Shell Shortcuts</title><link>http://typdef.com/posts/cli/bash-shell-shortcuts/</link><pubDate>Wed, 26 Oct 2022 12:30:00 +0400</pubDate><guid>http://typdef.com/posts/cli/bash-shell-shortcuts/</guid><description>Key Binding Description ESC f, ESC b Go forward/backword one word CTRL a, CTRL e Go to start/end of line ~ C Enter SSH Command Mode C-b, C-f Move backward/forward one character M-b, M-f Move backward/forward by word C-a, C-e Move to the beginning/end of the line C-w, M-d Kill word backward/forward C-d, Backspace Delete char forward/backward C-d may send EOF on an empty line M-. cycle through the argument to the previous commands C-k, C-u Kill (to clipboard) to end of line/beginning of line C-y Yank from kill ring M-y (after C-y) Cycle through kill ring history C-t, M-t Transpose character/word M-u, M-l, M-c Upper, lower, or capitalize forward word C-_, C-x C-u, C-/ Cycle through the undo list Note: C = Ctrl, M = Meta Key/modifier (alt or esc)</description></item><item><title>Getting a command from Shell History, Fast</title><link>http://typdef.com/posts/cli/reverse-shell-search/</link><pubDate>Thu, 10 Mar 2022 12:16:00 +0400</pubDate><guid>http://typdef.com/posts/cli/reverse-shell-search/</guid><description>To quickly search through, or re-run one of the previously run command, especially if it is a long one, instead of searching the .hist file, you can just type ctrl r and that will bring up a reverse/back search prompt where it will try to autocomplete the previously run command.
The command search from most recently used first, so if the first suggestion is not the command you want, you can keep going back and searching by repeatedly typing ctrl r</description></item><item><title>Onefetch</title><link>http://typdef.com/posts/cli/onefetch/</link><pubDate>Wed, 19 Jan 2022 00:52:00 +0400</pubDate><guid>http://typdef.com/posts/cli/onefetch/</guid><description>Onefetch is a command-line Git information tool written in Rust that displays project information and code statistics for a local Git repository directly on your terminal. The tool is completely offline - no network access is required.
By default, the repo&amp;rsquo;s information is displayed alongside the dominant language&amp;rsquo;s logo, but you can further configure onefetch to instead use an image - on supported terminals -, a text input or nothing at all.</description></item><item><title>ZSH Shenanigans</title><link>http://typdef.com/posts/cli/zsh-shenanigans/</link><pubDate>Wed, 05 Jan 2022 12:00:00 +0400</pubDate><guid>http://typdef.com/posts/cli/zsh-shenanigans/</guid><description>Aliases Python Aliases alias pip=&amp;#39;python3 -m pip&amp;#39; alias python=&amp;#39;python3&amp;#39; alias py=&amp;#39;python3&amp;#39; ls Alias Because ls does not automagically add color
alias ls=&amp;#39;ls --color&amp;#39; Prompt customization checkout the sourcefile for more, here I am going to detail the customization that I add.
export PROMPT=$&amp;#39;%F{green}%B%n%b%f %F{111}%3~%f %(?.%F{green}\U279c%f.%F{009}\U279c%f) &amp;#39; $ : Required for unicode parsing %F&amp;hellip;.%f is for setting Foreground colors, colors specified in {color/color_code} format %B&amp;hellip;.%b for bold text %n for username %m for machine name (condensed) %~ for pwd, but with $HOME prefix, 3 for the number of parent dirs to show alternatively use %d or %/ for full paths \U0000 for unicode %(?</description></item><item><title>Download files with curl</title><link>http://typdef.com/posts/cli/download-files-with-curl/</link><pubDate>Sun, 26 Dec 2021 20:48:00 +0400</pubDate><guid>http://typdef.com/posts/cli/download-files-with-curl/</guid><description>You can download files with curl, just like with wget, using the flag -O
The capital -O outputs the file name to be as the same name as the one on the server, but you can also use -o (small o), to name the files as you want, like curl -o filename link-to-file
These flags are important, because otherwise, curl will dump the output to stdout.</description></item></channel></rss>