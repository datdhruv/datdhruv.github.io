<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Postgresql on typdef's Blog</title><link>http://typdef.com/tags/postgresql/</link><description>Recent content in Postgresql on typdef's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 24 Jun 2023 11:30:00 +0400</lastBuildDate><atom:link href="http://typdef.com/tags/postgresql/index.xml" rel="self" type="application/rss+xml"/><item><title>Installing Postgresql on Ubuntu</title><link>http://typdef.com/posts/postgresql/postgresql/</link><pubDate>Sat, 24 Jun 2023 11:30:00 +0400</pubDate><guid>http://typdef.com/posts/postgresql/postgresql/</guid><description>Installing Postgres sudo apt search postgres sudo apt install postgresql sudo apt install postgresql postgresql-contrib sudo systemctl start postgresql.service sudo -i -u postgres sudo -u postgres createuser --interactive sudo -u upskillr psql sudo -u postgres createdb upskillr sudo -u upskillr psql sudo adduser upskillr sudo -u upskillr psql Double and single Quotes in (PG)SQL Double quotes are for names of tables or fields. Sometimes You can omit them. The single quotes are for string constants.</description></item><item><title>Some Postgresql Examples</title><link>http://typdef.com/posts/postgresql/examples/</link><pubDate>Sat, 24 Jun 2023 11:30:00 +0400</pubDate><guid>http://typdef.com/posts/postgresql/examples/</guid><description>jsonb to record select fla.offer_id, ans_data.* from fla, jsonb_to_record(answer_data) as ans_data(&amp;#34;AE46&amp;#34; text,&amp;#34;AE3&amp;#34; text,&amp;#34;AE16&amp;#34; text,&amp;#34;AE45&amp;#34; date,&amp;#34;AE47&amp;#34; date,&amp;#34;AE55&amp;#34; text,&amp;#34;AE60&amp;#34; text,&amp;#34;AE61&amp;#34; text,&amp;#34;AE73&amp;#34; date,&amp;#34;AE74&amp;#34; date,&amp;#34;AE62&amp;#34; text,&amp;#34;AE27&amp;#34; text,&amp;#34;AE42&amp;#34; text,&amp;#34;AE58&amp;#34; text,&amp;#34;AE25&amp;#34; text,&amp;#34;AE54&amp;#34; text,&amp;#34;AE44&amp;#34; text,&amp;#34;AE17&amp;#34; text,&amp;#34;AE53&amp;#34; text,&amp;#34;AE59&amp;#34; text,&amp;#34;AE19&amp;#34; text,&amp;#34;AE56&amp;#34; text,&amp;#34;AE21&amp;#34; text,&amp;#34;AE57&amp;#34; text,&amp;#34;AE33&amp;#34; text,&amp;#34;AE32&amp;#34; text,&amp;#34;AE41&amp;#34; date,&amp;#34;AE31&amp;#34; date,&amp;#34;AE65&amp;#34; text,&amp;#34;AE66&amp;#34; text,&amp;#34;AE67&amp;#34; text,&amp;#34;AE72&amp;#34; text,&amp;#34;AE52&amp;#34; text,&amp;#34;AE38&amp;#34; text,&amp;#34;AE69&amp;#34; text,&amp;#34;AE70&amp;#34; text,&amp;#34;AE68&amp;#34; text,&amp;#34;AE71&amp;#34; text,&amp;#34;AE39&amp;#34; text); Accessing record&amp;rsquo;s key and values select offer_id, rev, bf.key as business_field, bf.value as business_field_comments from table_name tn, jsonb_each_text((tn.answer_data-&amp;gt;&amp;gt;&amp;#39;FI5&amp;#39;)::jsonb) as bf; JSON String agg -- Data is stored as text within a json.</description></item></channel></rss>